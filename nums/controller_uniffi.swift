// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(controller_uniffiFFI)
import controller_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_controller_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_controller_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureControllerUniffiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
// Initial value and increment amount for handles. 
// These ensure that SWIFT handles always have the lowest bit set
fileprivate let UNIFFI_HANDLEMAP_INITIAL: UInt64 = 1
fileprivate let UNIFFI_HANDLEMAP_DELTA: UInt64 = 2

fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = UNIFFI_HANDLEMAP_INITIAL

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            return doInsert(obj)
        }
    }

    // Low-level insert function, this assumes `lock` is held.
    private func doInsert(_ obj: T) -> UInt64 {
        let handle = currentHandle
        currentHandle += UNIFFI_HANDLEMAP_DELTA
        map[handle] = obj
        return handle
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

     func clone(handle: UInt64) throws -> UInt64 {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return doInsert(obj)
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol ControllerAccountProtocol: AnyObject, Sendable {
    
    func address() throws  -> ControllerFieldElement
    
    func appId() throws  -> String
    
    func chainId() throws  -> ControllerFieldElement
    
    func clearLastError() 
    
    func delegateAccount() throws  -> ControllerFieldElement
    
    func disconnect() throws 
    
    func errorMessage() throws  -> String
    
    func execute(calls: [Call]) throws  -> ControllerFieldElement
    
    func signup(signerType: SignerType, sessionExpiration: UInt64?, cartridgeApiUrl: String?) throws 
    
    func switchChain(rpcUrl: String) throws 
    
    func transfer(recipient: ControllerFieldElement, amount: ControllerFieldElement) throws  -> ControllerFieldElement
    
    func username() throws  -> String
    
}
open class ControllerAccount: ControllerAccountProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_controller_uniffi_fn_clone_controlleraccount(self.handle, $0) }
    }
public convenience init(appId: String, username: String, classHash: ControllerFieldElement, rpcUrl: String, owner: Owner, address: ControllerFieldElement, chainId: ControllerFieldElement)throws  {
    let handle =
        try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_constructor_controlleraccount_new(
        FfiConverterString.lower(appId),
        FfiConverterString.lower(username),
        FfiConverterTypeControllerFieldElement_lower(classHash),
        FfiConverterString.lower(rpcUrl),
        FfiConverterTypeOwner_lower(owner),
        FfiConverterTypeControllerFieldElement_lower(address),
        FfiConverterTypeControllerFieldElement_lower(chainId),$0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_controller_uniffi_fn_free_controlleraccount(handle, $0) }
    }

    
public static func fromStorage(appId: String)throws  -> ControllerAccount  {
    return try  FfiConverterTypeControllerAccount_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_constructor_controlleraccount_from_storage(
        FfiConverterString.lower(appId),$0
    )
})
}
    
public static func newHeadless(appId: String, username: String, classHash: ControllerFieldElement, rpcUrl: String, owner: Owner, chainId: ControllerFieldElement)throws  -> ControllerAccount  {
    return try  FfiConverterTypeControllerAccount_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_constructor_controlleraccount_new_headless(
        FfiConverterString.lower(appId),
        FfiConverterString.lower(username),
        FfiConverterTypeControllerFieldElement_lower(classHash),
        FfiConverterString.lower(rpcUrl),
        FfiConverterTypeOwner_lower(owner),
        FfiConverterTypeControllerFieldElement_lower(chainId),$0
    )
})
}
    

    
open func address()throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_address(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func appId()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_app_id(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func chainId()throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_chain_id(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func clearLastError()  {try! rustCall() {
    uniffi_controller_uniffi_fn_method_controlleraccount_clear_last_error(
            self.uniffiCloneHandle(),$0
    )
}
}
    
open func delegateAccount()throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_delegate_account(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func disconnect()throws   {try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_disconnect(
            self.uniffiCloneHandle(),$0
    )
}
}
    
open func errorMessage()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_error_message(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func execute(calls: [Call])throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_execute(
            self.uniffiCloneHandle(),
        FfiConverterSequenceTypeCall.lower(calls),$0
    )
})
}
    
open func signup(signerType: SignerType, sessionExpiration: UInt64?, cartridgeApiUrl: String?)throws   {try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_signup(
            self.uniffiCloneHandle(),
        FfiConverterTypeSignerType_lower(signerType),
        FfiConverterOptionUInt64.lower(sessionExpiration),
        FfiConverterOptionString.lower(cartridgeApiUrl),$0
    )
}
}
    
open func switchChain(rpcUrl: String)throws   {try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_switch_chain(
            self.uniffiCloneHandle(),
        FfiConverterString.lower(rpcUrl),$0
    )
}
}
    
open func transfer(recipient: ControllerFieldElement, amount: ControllerFieldElement)throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_transfer(
            self.uniffiCloneHandle(),
        FfiConverterTypeControllerFieldElement_lower(recipient),
        FfiConverterTypeControllerFieldElement_lower(amount),$0
    )
})
}
    
open func username()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_controlleraccount_username(
            self.uniffiCloneHandle(),$0
    )
})
}
    

    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeControllerAccount: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = ControllerAccount

    public static func lift(_ handle: UInt64) throws -> ControllerAccount {
        return ControllerAccount(unsafeFromHandle: handle)
    }

    public static func lower(_ value: ControllerAccount) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ControllerAccount {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: ControllerAccount, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeControllerAccount_lift(_ handle: UInt64) throws -> ControllerAccount {
    return try FfiConverterTypeControllerAccount.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeControllerAccount_lower(_ value: ControllerAccount) -> UInt64 {
    return FfiConverterTypeControllerAccount.lower(value)
}






public protocol OwnerProtocol: AnyObject, Sendable {
    
}
open class Owner: OwnerProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_controller_uniffi_fn_clone_owner(self.handle, $0) }
    }
public convenience init(privateKey: String)throws  {
    let handle =
        try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_constructor_owner_new(
        FfiConverterString.lower(privateKey),$0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_controller_uniffi_fn_free_owner(handle, $0) }
    }

    

    

    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOwner: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = Owner

    public static func lift(_ handle: UInt64) throws -> Owner {
        return Owner(unsafeFromHandle: handle)
    }

    public static func lower(_ value: Owner) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Owner {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: Owner, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwner_lift(_ handle: UInt64) throws -> Owner {
    return try FfiConverterTypeOwner.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOwner_lower(_ value: Owner) -> UInt64 {
    return FfiConverterTypeOwner.lower(value)
}






public protocol SessionAccountProtocol: AnyObject, Sendable {
    
    func address()  -> String
    
    func appId()  -> String?
    
    func chainId()  -> String
    
    func execute(calls: [Call]) throws  -> ControllerFieldElement
    
    func executeFromOutside(calls: [Call]) throws  -> ControllerFieldElement
    
    func expiresAt()  -> UInt64
    
    func isExpired()  -> Bool
    
    func isRevoked()  -> Bool
    
    func ownerGuid()  -> String
    
    func sessionId()  -> String?
    
    func username()  -> String?
    
}
open class SessionAccount: SessionAccountProtocol, @unchecked Sendable {
    fileprivate let handle: UInt64

    /// Used to instantiate a [FFIObject] without an actual handle, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoHandle {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromHandle handle: UInt64) {
        self.handle = handle
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noHandle: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing handle the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noHandle: NoHandle) {
        self.handle = 0
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiCloneHandle() -> UInt64 {
        return try! rustCall { uniffi_controller_uniffi_fn_clone_sessionaccount(self.handle, $0) }
    }
public convenience init(rpcUrl: String, privateKey: String, address: ControllerFieldElement, ownerGuid: ControllerFieldElement, chainId: ControllerFieldElement, policies: SessionPolicies, sessionExpiration: UInt64)throws  {
    let handle =
        try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_constructor_sessionaccount_new(
        FfiConverterString.lower(rpcUrl),
        FfiConverterString.lower(privateKey),
        FfiConverterTypeControllerFieldElement_lower(address),
        FfiConverterTypeControllerFieldElement_lower(ownerGuid),
        FfiConverterTypeControllerFieldElement_lower(chainId),
        FfiConverterTypeSessionPolicies_lower(policies),
        FfiConverterUInt64.lower(sessionExpiration),$0
    )
}
    self.init(unsafeFromHandle: handle)
}

    deinit {
        try! rustCall { uniffi_controller_uniffi_fn_free_sessionaccount(handle, $0) }
    }

    
public static func createFromSubscribe(privateKey: String, policies: SessionPolicies, rpcUrl: String, cartridgeApiUrl: String)throws  -> SessionAccount  {
    return try  FfiConverterTypeSessionAccount_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_constructor_sessionaccount_create_from_subscribe(
        FfiConverterString.lower(privateKey),
        FfiConverterTypeSessionPolicies_lower(policies),
        FfiConverterString.lower(rpcUrl),
        FfiConverterString.lower(cartridgeApiUrl),$0
    )
})
}
    

    
open func address() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_address(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func appId() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_app_id(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func chainId() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_chain_id(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func execute(calls: [Call])throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_sessionaccount_execute(
            self.uniffiCloneHandle(),
        FfiConverterSequenceTypeCall.lower(calls),$0
    )
})
}
    
open func executeFromOutside(calls: [Call])throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_method_sessionaccount_execute_from_outside(
            self.uniffiCloneHandle(),
        FfiConverterSequenceTypeCall.lower(calls),$0
    )
})
}
    
open func expiresAt() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_expires_at(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func isExpired() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_is_expired(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func isRevoked() -> Bool  {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_is_revoked(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func ownerGuid() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_owner_guid(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func sessionId() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_session_id(
            self.uniffiCloneHandle(),$0
    )
})
}
    
open func username() -> String?  {
    return try!  FfiConverterOptionString.lift(try! rustCall() {
    uniffi_controller_uniffi_fn_method_sessionaccount_username(
            self.uniffiCloneHandle(),$0
    )
})
}
    

    
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionAccount: FfiConverter {
    typealias FfiType = UInt64
    typealias SwiftType = SessionAccount

    public static func lift(_ handle: UInt64) throws -> SessionAccount {
        return SessionAccount(unsafeFromHandle: handle)
    }

    public static func lower(_ value: SessionAccount) -> UInt64 {
        return value.uniffiCloneHandle()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionAccount {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func write(_ value: SessionAccount, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionAccount_lift(_ handle: UInt64) throws -> SessionAccount {
    return try FfiConverterTypeSessionAccount.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionAccount_lower(_ value: SessionAccount) -> UInt64 {
    return FfiConverterTypeSessionAccount.lower(value)
}




public struct Call: Equatable, Hashable {
    public var contractAddress: ControllerFieldElement
    public var entrypoint: String
    public var calldata: [ControllerFieldElement]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(contractAddress: ControllerFieldElement, entrypoint: String, calldata: [ControllerFieldElement]) {
        self.contractAddress = contractAddress
        self.entrypoint = entrypoint
        self.calldata = calldata
    }

    
}

#if compiler(>=6)
extension Call: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCall: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Call {
        return
            try Call(
                contractAddress: FfiConverterTypeControllerFieldElement.read(from: &buf), 
                entrypoint: FfiConverterString.read(from: &buf), 
                calldata: FfiConverterSequenceTypeControllerFieldElement.read(from: &buf)
        )
    }

    public static func write(_ value: Call, into buf: inout [UInt8]) {
        FfiConverterTypeControllerFieldElement.write(value.contractAddress, into: &buf)
        FfiConverterString.write(value.entrypoint, into: &buf)
        FfiConverterSequenceTypeControllerFieldElement.write(value.calldata, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCall_lift(_ buf: RustBuffer) throws -> Call {
    return try FfiConverterTypeCall.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCall_lower(_ value: Call) -> RustBuffer {
    return FfiConverterTypeCall.lower(value)
}


public struct SessionPolicies: Equatable, Hashable {
    public var policies: [SessionPolicy]
    public var maxFee: ControllerFieldElement

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(policies: [SessionPolicy], maxFee: ControllerFieldElement) {
        self.policies = policies
        self.maxFee = maxFee
    }

    
}

#if compiler(>=6)
extension SessionPolicies: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionPolicies: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionPolicies {
        return
            try SessionPolicies(
                policies: FfiConverterSequenceTypeSessionPolicy.read(from: &buf), 
                maxFee: FfiConverterTypeControllerFieldElement.read(from: &buf)
        )
    }

    public static func write(_ value: SessionPolicies, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeSessionPolicy.write(value.policies, into: &buf)
        FfiConverterTypeControllerFieldElement.write(value.maxFee, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionPolicies_lift(_ buf: RustBuffer) throws -> SessionPolicies {
    return try FfiConverterTypeSessionPolicies.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionPolicies_lower(_ value: SessionPolicies) -> RustBuffer {
    return FfiConverterTypeSessionPolicies.lower(value)
}


public struct SessionPolicy: Equatable, Hashable {
    public var contractAddress: ControllerFieldElement
    public var entrypoint: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(contractAddress: ControllerFieldElement, entrypoint: String) {
        self.contractAddress = contractAddress
        self.entrypoint = entrypoint
    }

    
}

#if compiler(>=6)
extension SessionPolicy: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSessionPolicy: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SessionPolicy {
        return
            try SessionPolicy(
                contractAddress: FfiConverterTypeControllerFieldElement.read(from: &buf), 
                entrypoint: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: SessionPolicy, into buf: inout [UInt8]) {
        FfiConverterTypeControllerFieldElement.write(value.contractAddress, into: &buf)
        FfiConverterString.write(value.entrypoint, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionPolicy_lift(_ buf: RustBuffer) throws -> SessionPolicy {
    return try FfiConverterTypeSessionPolicy.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSessionPolicy_lower(_ value: SessionPolicy) -> RustBuffer {
    return FfiConverterTypeSessionPolicy.lower(value)
}


public enum ControllerError: Swift.Error, Equatable, Hashable, Foundation.LocalizedError {

    
    
    case InitializationError(message: String)
    
    case SignupError(message: String)
    
    case ExecutionError(message: String)
    
    case NetworkError(message: String)
    
    case StorageError(message: String)
    
    case InvalidInput(message: String)
    
    case DisconnectError(message: String)
    

    

    
    public var errorDescription: String? {
        String(reflecting: self)
    }
    
}

#if compiler(>=6)
extension ControllerError: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeControllerError: FfiConverterRustBuffer {
    typealias SwiftType = ControllerError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ControllerError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InitializationError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SignupError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .ExecutionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .NetworkError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .StorageError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .InvalidInput(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .DisconnectError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ControllerError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InitializationError(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .SignupError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .ExecutionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .NetworkError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .StorageError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .InvalidInput(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .DisconnectError(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))

        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeControllerError_lift(_ buf: RustBuffer) throws -> ControllerError {
    return try FfiConverterTypeControllerError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeControllerError_lower(_ value: ControllerError) -> RustBuffer {
    return FfiConverterTypeControllerError.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SignerType: Equatable, Hashable {
    
    case webauthn
    case starknet



}

#if compiler(>=6)
extension SignerType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignerType: FfiConverterRustBuffer {
    typealias SwiftType = SignerType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SignerType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .webauthn
        
        case 2: return .starknet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SignerType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .webauthn:
            writeInt(&buf, Int32(1))
        
        
        case .starknet:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignerType_lift(_ buf: RustBuffer) throws -> SignerType {
    return try FfiConverterTypeSignerType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignerType_lower(_ value: SignerType) -> RustBuffer {
    return FfiConverterTypeSignerType.lower(value)
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Version: Equatable, Hashable {
    
    case v104
    case v105
    case v106
    case v107
    case v108
    case v109
    case latest



}

#if compiler(>=6)
extension Version: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVersion: FfiConverterRustBuffer {
    typealias SwiftType = Version

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Version {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .v104
        
        case 2: return .v105
        
        case 3: return .v106
        
        case 4: return .v107
        
        case 5: return .v108
        
        case 6: return .v109
        
        case 7: return .latest
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Version, into buf: inout [UInt8]) {
        switch value {
        
        
        case .v104:
            writeInt(&buf, Int32(1))
        
        
        case .v105:
            writeInt(&buf, Int32(2))
        
        
        case .v106:
            writeInt(&buf, Int32(3))
        
        
        case .v107:
            writeInt(&buf, Int32(4))
        
        
        case .v108:
            writeInt(&buf, Int32(5))
        
        
        case .v109:
            writeInt(&buf, Int32(6))
        
        
        case .latest:
            writeInt(&buf, Int32(7))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVersion_lift(_ buf: RustBuffer) throws -> Version {
    return try FfiConverterTypeVersion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVersion_lower(_ value: Version) -> RustBuffer {
    return FfiConverterTypeVersion.lower(value)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCall: FfiConverterRustBuffer {
    typealias SwiftType = [Call]

    public static func write(_ value: [Call], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCall.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Call] {
        let len: Int32 = try readInt(&buf)
        var seq = [Call]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCall.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeSessionPolicy: FfiConverterRustBuffer {
    typealias SwiftType = [SessionPolicy]

    public static func write(_ value: [SessionPolicy], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSessionPolicy.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SessionPolicy] {
        let len: Int32 = try readInt(&buf)
        var seq = [SessionPolicy]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSessionPolicy.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeControllerFieldElement: FfiConverterRustBuffer {
    typealias SwiftType = [ControllerFieldElement]

    public static func write(_ value: [ControllerFieldElement], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeControllerFieldElement.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ControllerFieldElement] {
        let len: Int32 = try readInt(&buf)
        var seq = [ControllerFieldElement]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeControllerFieldElement.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias ControllerFieldElement = String

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeControllerFieldElement: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ControllerFieldElement {
        return try FfiConverterString.read(from: &buf)
    }

    public static func write(_ value: ControllerFieldElement, into buf: inout [UInt8]) {
        return FfiConverterString.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> ControllerFieldElement {
        return try FfiConverterString.lift(value)
    }

    public static func lower(_ value: ControllerFieldElement) -> RustBuffer {
        return FfiConverterString.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeControllerFieldElement_lift(_ value: RustBuffer) throws -> ControllerFieldElement {
    return try FfiConverterTypeControllerFieldElement.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeControllerFieldElement_lower(_ value: ControllerFieldElement) -> RustBuffer {
    return FfiConverterTypeControllerFieldElement.lower(value)
}

public func controllerHasStorage(appId: String)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_func_controller_has_storage(
        FfiConverterString.lower(appId),$0
    )
})
}
public func getControllerClassHash(version: Version)throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_func_get_controller_class_hash(
        FfiConverterTypeVersion_lower(version),$0
    )
})
}
public func getPublicKey(privateKey: ControllerFieldElement)throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_func_get_public_key(
        FfiConverterTypeControllerFieldElement_lower(privateKey),$0
    )
})
}
public func signerToGuid(privateKey: ControllerFieldElement)throws  -> ControllerFieldElement  {
    return try  FfiConverterTypeControllerFieldElement_lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_func_signer_to_guid(
        FfiConverterTypeControllerFieldElement_lower(privateKey),$0
    )
})
}
public func validateFelt(felt: String)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeControllerError_lift) {
    uniffi_controller_uniffi_fn_func_validate_felt(
        FfiConverterString.lower(felt),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 30
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_controller_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_controller_uniffi_checksum_func_controller_has_storage() != 40864) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_func_get_controller_class_hash() != 53006) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_func_get_public_key() != 43455) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_func_signer_to_guid() != 46384) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_func_validate_felt() != 45886) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_address() != 26106) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_app_id() != 16856) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_chain_id() != 17535) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_clear_last_error() != 4396) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_delegate_account() != 35092) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_disconnect() != 22110) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_error_message() != 10095) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_execute() != 21076) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_signup() != 15081) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_switch_chain() != 38838) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_transfer() != 14676) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_controlleraccount_username() != 61539) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_address() != 14778) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_app_id() != 33071) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_chain_id() != 36850) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_execute() != 42467) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_execute_from_outside() != 4484) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_expires_at() != 21117) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_is_expired() != 37606) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_is_revoked() != 17252) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_owner_guid() != 15668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_session_id() != 35493) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_method_sessionaccount_username() != 22367) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_constructor_controlleraccount_from_storage() != 53452) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_constructor_controlleraccount_new() != 11383) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_constructor_controlleraccount_new_headless() != 47497) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_constructor_owner_new() != 62973) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_constructor_sessionaccount_create_from_subscribe() != 29386) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_controller_uniffi_checksum_constructor_sessionaccount_new() != 5711) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureControllerUniffiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all